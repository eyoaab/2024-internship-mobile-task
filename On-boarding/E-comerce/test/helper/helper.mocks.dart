// Mocks generated by Mockito 5.4.4 from annotations
// in task_6/test/helper/helper.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i6;
import 'dart:convert' as _i7;
import 'dart:typed_data' as _i9;

import 'package:dartz/dartz.dart' as _i4;
import 'package:http/http.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i8;
import 'package:shared_preferences/shared_preferences.dart' as _i15;
import 'package:task_6/core/error/faliure.dart' as _i11;
import 'package:task_6/core/Network/networl_info.dart' as _i14;
import 'package:task_6/data/dataSource/local_product_source.dart' as _i13;
import 'package:task_6/data/dataSource/remote_product_source.dart' as _i10;
import 'package:task_6/data/model/product_model.dart' as _i3;
import 'package:task_6/domain/entitiy/product_entities.dart' as _i12;
import 'package:task_6/domain/repository/product_repository.dart' as _i5;
import 'package:task_6/domain/usecase/add_product_usecase.dart' as _i20;
import 'package:task_6/domain/usecase/delete_product_usecase.dart' as _i19;
import 'package:task_6/domain/usecase/get_all_products.dart' as _i16;
import 'package:task_6/domain/usecase/get_product_by_id.dart' as _i17;
import 'package:task_6/domain/usecase/update_product_usecase.dart' as _i18;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeResponse_0 extends _i1.SmartFake implements _i2.Response {
  _FakeResponse_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeStreamedResponse_1 extends _i1.SmartFake
    implements _i2.StreamedResponse {
  _FakeStreamedResponse_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeProductsModel_2 extends _i1.SmartFake implements _i3.ProductsModel {
  _FakeProductsModel_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeEither_3<L, R> extends _i1.SmartFake implements _i4.Either<L, R> {
  _FakeEither_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeProductRepository_4 extends _i1.SmartFake
    implements _i5.ProductRepository {
  _FakeProductRepository_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [Client].
///
/// See the documentation for Mockito's code generation for more information.
class MockClient extends _i1.Mock implements _i2.Client {
  MockClient() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<_i2.Response> head(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #head,
          [url],
          {#headers: headers},
        ),
        returnValue: _i6.Future<_i2.Response>.value(_FakeResponse_0(
          this,
          Invocation.method(
            #head,
            [url],
            {#headers: headers},
          ),
        )),
      ) as _i6.Future<_i2.Response>);

  @override
  _i6.Future<_i2.Response> get(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #get,
          [url],
          {#headers: headers},
        ),
        returnValue: _i6.Future<_i2.Response>.value(_FakeResponse_0(
          this,
          Invocation.method(
            #get,
            [url],
            {#headers: headers},
          ),
        )),
      ) as _i6.Future<_i2.Response>);

  @override
  _i6.Future<_i2.Response> post(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i7.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #post,
          [url],
          {
            #headers: headers,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i6.Future<_i2.Response>.value(_FakeResponse_0(
          this,
          Invocation.method(
            #post,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i6.Future<_i2.Response>);

  @override
  _i6.Future<_i2.Response> put(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i7.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #put,
          [url],
          {
            #headers: headers,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i6.Future<_i2.Response>.value(_FakeResponse_0(
          this,
          Invocation.method(
            #put,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i6.Future<_i2.Response>);

  @override
  _i6.Future<_i2.Response> patch(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i7.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #patch,
          [url],
          {
            #headers: headers,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i6.Future<_i2.Response>.value(_FakeResponse_0(
          this,
          Invocation.method(
            #patch,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i6.Future<_i2.Response>);

  @override
  _i6.Future<_i2.Response> delete(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i7.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #delete,
          [url],
          {
            #headers: headers,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i6.Future<_i2.Response>.value(_FakeResponse_0(
          this,
          Invocation.method(
            #delete,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i6.Future<_i2.Response>);

  @override
  _i6.Future<String> read(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #read,
          [url],
          {#headers: headers},
        ),
        returnValue: _i6.Future<String>.value(_i8.dummyValue<String>(
          this,
          Invocation.method(
            #read,
            [url],
            {#headers: headers},
          ),
        )),
      ) as _i6.Future<String>);

  @override
  _i6.Future<_i9.Uint8List> readBytes(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #readBytes,
          [url],
          {#headers: headers},
        ),
        returnValue: _i6.Future<_i9.Uint8List>.value(_i9.Uint8List(0)),
      ) as _i6.Future<_i9.Uint8List>);

  @override
  _i6.Future<_i2.StreamedResponse> send(_i2.BaseRequest? request) =>
      (super.noSuchMethod(
        Invocation.method(
          #send,
          [request],
        ),
        returnValue:
            _i6.Future<_i2.StreamedResponse>.value(_FakeStreamedResponse_1(
          this,
          Invocation.method(
            #send,
            [request],
          ),
        )),
      ) as _i6.Future<_i2.StreamedResponse>);

  @override
  void close() => super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [ProductRemoteDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockProductRemoteDataSource extends _i1.Mock
    implements _i10.ProductRemoteDataSource {
  MockProductRemoteDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<_i3.ProductsModel> getProductById(String? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #getProductById,
          [id],
        ),
        returnValue: _i6.Future<_i3.ProductsModel>.value(_FakeProductsModel_2(
          this,
          Invocation.method(
            #getProductById,
            [id],
          ),
        )),
      ) as _i6.Future<_i3.ProductsModel>);

  @override
  _i6.Future<_i4.Either<_i11.Failure, bool>> ProductAdd(
          _i12.ProductEnities? product) =>
      (super.noSuchMethod(
        Invocation.method(
          #ProductAdd,
          [product],
        ),
        returnValue: _i6.Future<_i4.Either<_i11.Failure, bool>>.value(
            _FakeEither_3<_i11.Failure, bool>(
          this,
          Invocation.method(
            #ProductAdd,
            [product],
          ),
        )),
      ) as _i6.Future<_i4.Either<_i11.Failure, bool>>);

  @override
  _i6.Future<_i4.Either<_i11.Failure, bool>> ProductDelete(String? productId) =>
      (super.noSuchMethod(
        Invocation.method(
          #ProductDelete,
          [productId],
        ),
        returnValue: _i6.Future<_i4.Either<_i11.Failure, bool>>.value(
            _FakeEither_3<_i11.Failure, bool>(
          this,
          Invocation.method(
            #ProductDelete,
            [productId],
          ),
        )),
      ) as _i6.Future<_i4.Either<_i11.Failure, bool>>);

  @override
  _i6.Future<_i4.Either<_i11.Failure, bool>> ProductUpdate(
    String? productId,
    _i12.ProductEnities? product,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #ProductUpdate,
          [
            productId,
            product,
          ],
        ),
        returnValue: _i6.Future<_i4.Either<_i11.Failure, bool>>.value(
            _FakeEither_3<_i11.Failure, bool>(
          this,
          Invocation.method(
            #ProductUpdate,
            [
              productId,
              product,
            ],
          ),
        )),
      ) as _i6.Future<_i4.Either<_i11.Failure, bool>>);

  @override
  _i6.Future<_i4.Either<_i11.Failure, List<_i3.ProductsModel>>>
      getAllProduct() => (super.noSuchMethod(
            Invocation.method(
              #getAllProduct,
              [],
            ),
            returnValue: _i6.Future<
                    _i4.Either<_i11.Failure, List<_i3.ProductsModel>>>.value(
                _FakeEither_3<_i11.Failure, List<_i3.ProductsModel>>(
              this,
              Invocation.method(
                #getAllProduct,
                [],
              ),
            )),
          ) as _i6.Future<_i4.Either<_i11.Failure, List<_i3.ProductsModel>>>);
}

/// A class which mocks [ProductLocalDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockProductLocalDataSource extends _i1.Mock
    implements _i13.ProductLocalDataSource {
  MockProductLocalDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<List<_i3.ProductsModel>> getStoredProducts() =>
      (super.noSuchMethod(
        Invocation.method(
          #getStoredProducts,
          [],
        ),
        returnValue:
            _i6.Future<List<_i3.ProductsModel>>.value(<_i3.ProductsModel>[]),
      ) as _i6.Future<List<_i3.ProductsModel>>);

  @override
  _i6.Future<bool> storeProduct(_i3.ProductsModel? productToStore) =>
      (super.noSuchMethod(
        Invocation.method(
          #storeProduct,
          [productToStore],
        ),
        returnValue: _i6.Future<bool>.value(false),
      ) as _i6.Future<bool>);
}

/// A class which mocks [NetworkInfo].
///
/// See the documentation for Mockito's code generation for more information.
class MockNetworkInfo extends _i1.Mock implements _i14.NetworkInfo {
  MockNetworkInfo() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<bool> get isConnected => (super.noSuchMethod(
        Invocation.getter(#isConnected),
        returnValue: _i6.Future<bool>.value(false),
      ) as _i6.Future<bool>);
}

/// A class which mocks [SharedPreferences].
///
/// See the documentation for Mockito's code generation for more information.
class MockSharedPreferences extends _i1.Mock implements _i15.SharedPreferences {
  MockSharedPreferences() {
    _i1.throwOnMissingStub(this);
  }

  @override
  Set<String> getKeys() => (super.noSuchMethod(
        Invocation.method(
          #getKeys,
          [],
        ),
        returnValue: <String>{},
      ) as Set<String>);

  @override
  Object? get(String? key) => (super.noSuchMethod(Invocation.method(
        #get,
        [key],
      )) as Object?);

  @override
  bool? getBool(String? key) => (super.noSuchMethod(Invocation.method(
        #getBool,
        [key],
      )) as bool?);

  @override
  int? getInt(String? key) => (super.noSuchMethod(Invocation.method(
        #getInt,
        [key],
      )) as int?);

  @override
  double? getDouble(String? key) => (super.noSuchMethod(Invocation.method(
        #getDouble,
        [key],
      )) as double?);

  @override
  String? getString(String? key) => (super.noSuchMethod(Invocation.method(
        #getString,
        [key],
      )) as String?);

  @override
  bool containsKey(String? key) => (super.noSuchMethod(
        Invocation.method(
          #containsKey,
          [key],
        ),
        returnValue: false,
      ) as bool);

  @override
  List<String>? getStringList(String? key) =>
      (super.noSuchMethod(Invocation.method(
        #getStringList,
        [key],
      )) as List<String>?);

  @override
  _i6.Future<bool> setBool(
    String? key,
    bool? value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #setBool,
          [
            key,
            value,
          ],
        ),
        returnValue: _i6.Future<bool>.value(false),
      ) as _i6.Future<bool>);

  @override
  _i6.Future<bool> setInt(
    String? key,
    int? value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #setInt,
          [
            key,
            value,
          ],
        ),
        returnValue: _i6.Future<bool>.value(false),
      ) as _i6.Future<bool>);

  @override
  _i6.Future<bool> setDouble(
    String? key,
    double? value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #setDouble,
          [
            key,
            value,
          ],
        ),
        returnValue: _i6.Future<bool>.value(false),
      ) as _i6.Future<bool>);

  @override
  _i6.Future<bool> setString(
    String? key,
    String? value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #setString,
          [
            key,
            value,
          ],
        ),
        returnValue: _i6.Future<bool>.value(false),
      ) as _i6.Future<bool>);

  @override
  _i6.Future<bool> setStringList(
    String? key,
    List<String>? value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #setStringList,
          [
            key,
            value,
          ],
        ),
        returnValue: _i6.Future<bool>.value(false),
      ) as _i6.Future<bool>);

  @override
  _i6.Future<bool> remove(String? key) => (super.noSuchMethod(
        Invocation.method(
          #remove,
          [key],
        ),
        returnValue: _i6.Future<bool>.value(false),
      ) as _i6.Future<bool>);

  @override
  _i6.Future<bool> commit() => (super.noSuchMethod(
        Invocation.method(
          #commit,
          [],
        ),
        returnValue: _i6.Future<bool>.value(false),
      ) as _i6.Future<bool>);

  @override
  _i6.Future<bool> clear() => (super.noSuchMethod(
        Invocation.method(
          #clear,
          [],
        ),
        returnValue: _i6.Future<bool>.value(false),
      ) as _i6.Future<bool>);

  @override
  _i6.Future<void> reload() => (super.noSuchMethod(
        Invocation.method(
          #reload,
          [],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);
}

/// A class which mocks [AllProductUsecase].
///
/// See the documentation for Mockito's code generation for more information.
class MockAllProductUsecase extends _i1.Mock implements _i16.AllProductUsecase {
  MockAllProductUsecase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.ProductRepository get productRepository => (super.noSuchMethod(
        Invocation.getter(#productRepository),
        returnValue: _FakeProductRepository_4(
          this,
          Invocation.getter(#productRepository),
        ),
      ) as _i5.ProductRepository);

  @override
  List<Object> get props => (super.noSuchMethod(
        Invocation.getter(#props),
        returnValue: <Object>[],
      ) as List<Object>);

  @override
  _i6.Future<_i4.Either<_i11.Failure, List<_i12.ProductEnities>>>
      call_AllProducts() => (super.noSuchMethod(
            Invocation.method(
              #call_AllProducts,
              [],
            ),
            returnValue: _i6.Future<
                    _i4.Either<_i11.Failure, List<_i12.ProductEnities>>>.value(
                _FakeEither_3<_i11.Failure, List<_i12.ProductEnities>>(
              this,
              Invocation.method(
                #call_AllProducts,
                [],
              ),
            )),
          ) as _i6.Future<_i4.Either<_i11.Failure, List<_i12.ProductEnities>>>);
}

/// A class which mocks [ShowProductById].
///
/// See the documentation for Mockito's code generation for more information.
class MockShowProductById extends _i1.Mock implements _i17.ShowProductById {
  MockShowProductById() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.ProductRepository get productRepository => (super.noSuchMethod(
        Invocation.getter(#productRepository),
        returnValue: _FakeProductRepository_4(
          this,
          Invocation.getter(#productRepository),
        ),
      ) as _i5.ProductRepository);

  @override
  List<Object?> get props => (super.noSuchMethod(
        Invocation.getter(#props),
        returnValue: <Object?>[],
      ) as List<Object?>);

  @override
  _i6.Future<_i4.Either<_i11.Failure, _i12.ProductEnities>> call_show(
          String? productId) =>
      (super.noSuchMethod(
        Invocation.method(
          #call_show,
          [productId],
        ),
        returnValue:
            _i6.Future<_i4.Either<_i11.Failure, _i12.ProductEnities>>.value(
                _FakeEither_3<_i11.Failure, _i12.ProductEnities>(
          this,
          Invocation.method(
            #call_show,
            [productId],
          ),
        )),
      ) as _i6.Future<_i4.Either<_i11.Failure, _i12.ProductEnities>>);
}

/// A class which mocks [UpdateProductUsecase].
///
/// See the documentation for Mockito's code generation for more information.
class MockUpdateProductUsecase extends _i1.Mock
    implements _i18.UpdateProductUsecase {
  MockUpdateProductUsecase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.ProductRepository get productRepository => (super.noSuchMethod(
        Invocation.getter(#productRepository),
        returnValue: _FakeProductRepository_4(
          this,
          Invocation.getter(#productRepository),
        ),
      ) as _i5.ProductRepository);

  @override
  List<Object?> get props => (super.noSuchMethod(
        Invocation.getter(#props),
        returnValue: <Object?>[],
      ) as List<Object?>);

  @override
  _i6.Future<_i4.Either<_i11.Failure, bool>> call_update(
    String? productId,
    _i12.ProductEnities? product,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #call_update,
          [
            productId,
            product,
          ],
        ),
        returnValue: _i6.Future<_i4.Either<_i11.Failure, bool>>.value(
            _FakeEither_3<_i11.Failure, bool>(
          this,
          Invocation.method(
            #call_update,
            [
              productId,
              product,
            ],
          ),
        )),
      ) as _i6.Future<_i4.Either<_i11.Failure, bool>>);
}

/// A class which mocks [DeleteProductbyidUsecase].
///
/// See the documentation for Mockito's code generation for more information.
class MockDeleteProductbyidUsecase extends _i1.Mock
    implements _i19.DeleteProductbyidUsecase {
  MockDeleteProductbyidUsecase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.ProductRepository get productRepository => (super.noSuchMethod(
        Invocation.getter(#productRepository),
        returnValue: _FakeProductRepository_4(
          this,
          Invocation.getter(#productRepository),
        ),
      ) as _i5.ProductRepository);

  @override
  List<Object> get props => (super.noSuchMethod(
        Invocation.getter(#props),
        returnValue: <Object>[],
      ) as List<Object>);

  @override
  _i6.Future<_i4.Either<_i11.Failure, bool>> call_delete(String? productId) =>
      (super.noSuchMethod(
        Invocation.method(
          #call_delete,
          [productId],
        ),
        returnValue: _i6.Future<_i4.Either<_i11.Failure, bool>>.value(
            _FakeEither_3<_i11.Failure, bool>(
          this,
          Invocation.method(
            #call_delete,
            [productId],
          ),
        )),
      ) as _i6.Future<_i4.Either<_i11.Failure, bool>>);
}

/// A class which mocks [AddProductUsecase].
///
/// See the documentation for Mockito's code generation for more information.
class MockAddProductUsecase extends _i1.Mock implements _i20.AddProductUsecase {
  MockAddProductUsecase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.ProductRepository get productRepository => (super.noSuchMethod(
        Invocation.getter(#productRepository),
        returnValue: _FakeProductRepository_4(
          this,
          Invocation.getter(#productRepository),
        ),
      ) as _i5.ProductRepository);

  @override
  List<Object?> get props => (super.noSuchMethod(
        Invocation.getter(#props),
        returnValue: <Object?>[],
      ) as List<Object?>);

  @override
  _i6.Future<_i4.Either<_i11.Failure, bool>> call_add(
          _i12.ProductEnities? product) =>
      (super.noSuchMethod(
        Invocation.method(
          #call_add,
          [product],
        ),
        returnValue: _i6.Future<_i4.Either<_i11.Failure, bool>>.value(
            _FakeEither_3<_i11.Failure, bool>(
          this,
          Invocation.method(
            #call_add,
            [product],
          ),
        )),
      ) as _i6.Future<_i4.Either<_i11.Failure, bool>>);
}
